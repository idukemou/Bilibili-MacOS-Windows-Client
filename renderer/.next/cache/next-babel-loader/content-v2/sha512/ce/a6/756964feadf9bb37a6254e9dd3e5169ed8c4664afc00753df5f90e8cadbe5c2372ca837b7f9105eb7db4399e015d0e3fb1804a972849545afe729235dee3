{"ast":null,"code":"import _defineProperty from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Player = /*#__PURE__*/function () {\n  function Player(mediaDataSource, container) {\n    _classCallCheck(this, Player);\n\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n    this.mediaContainer = document.getElementById(container);\n    this.init(container);\n  }\n  /**\n   * 初始化播放器并自动播放视频\n   * @param container 视频播放容器\n   */\n\n\n  _createClass(Player, [{\n    key: \"init\",\n    value: function init(container) {\n      var _this = this;\n\n      this.player.attachMediaElement(this.mediaContainer);\n      this.player.load();\n\n      this.mediaContainer.onloadeddata = function () {\n        _this.play();\n      };\n    }\n    /**\n     * 开始播放视频\n     */\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.player.play().then(function () {})[\"catch\"](function (e) {});\n    }\n    /**\n     * 暂停当前播放进度\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.player.pause();\n    }\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.player.pause();\n      this.player.unload();\n      this.player.detachMediaElement();\n      this.player.destroy();\n      this.player = null;\n    }\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      if (this.player) {\n        return this.player.currentTime;\n      }\n\n      return 0;\n    }\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n\n  }, {\n    key: \"setCurrentTime\",\n    value: function setCurrentTime(time) {\n      this.player.currentTime = time;\n      this.pushMillionSecond();\n    }\n  }, {\n    key: \"pushMillionSecond\",\n    value: function pushMillionSecond() {\n      this.player.currentTime = this.player.currentTime + 0.1;\n    }\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n\n  }, {\n    key: \"jumpOverTime\",\n    value: function jumpOverTime(time) {\n      this.setCurrentTime(this.getCurrentTime() + time);\n    }\n    /**\n     * 播放器的静音开关\n     * @returns {string|boolean|*} 返回 true 如果当前播放器已经静音，否则返回 false\n     */\n\n  }, {\n    key: \"muteSwitch\",\n    value: function muteSwitch() {\n      this.player.muted ? this.player.muted = false : this.player.muted = true;\n      return this.player.muted;\n    }\n    /**\n     * 获取当前播放的数据流视频长度\n     * @returns {*} 视频总播放长度\n     */\n\n  }, {\n    key: \"getDuration\",\n    value: function getDuration() {\n      if (this.player.duration === NaN) {}\n\n      return this.player.duration;\n    }\n    /**\n     * 重新播放当前视频\n     */\n\n  }, {\n    key: \"replayVideo\",\n    value: function replayVideo() {\n      this.setCurrentTime(0);\n      this.play();\n    }\n    /**\n     * 设置视频播放倍速\n     * @param rate 需要设置的播放倍速\n     */\n\n  }, {\n    key: \"setPlaySpeed\",\n    value: function setPlaySpeed(rate) {\n      this.mediaContainer.playbackRate = rate;\n    }\n  }, {\n    key: \"getMediaElement\",\n    value: function getMediaElement() {\n      return this.mediaContainer;\n    }\n  }]);\n\n  return Player;\n}();\n\nexport { Player as default };","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","mediaDataSource","container","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","mediaContainer","document","getElementById","init","attachMediaElement","load","onloadeddata","play","then","e","pause","unload","detachMediaElement","destroy","currentTime","time","pushMillionSecond","setCurrentTime","getCurrentTime","muted","duration","NaN","rate","playbackRate"],"mappings":";;;;;;;;IAAqBA,M;AACjB,kBAAYC,eAAZ,EAA6BC,SAA7B,EAAwC;AAAA;;AACpC,SAAKD,eAAL;AACIE,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOL,eALP;AAOA,SAAKM,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKR,eAAxB,CAAd;AACA,SAAKS,cAAL,GAAsBC,QAAQ,CAACC,cAAT,CAAwBV,SAAxB,CAAtB;AACA,SAAKW,IAAL,CAAUX,SAAV;AACH;AAED;AACJ;AACA;AACA;;;;;yBACSA,S,EAAU;AAAA;;AACX,WAAKK,MAAL,CAAYO,kBAAZ,CAA+B,KAAKJ,cAApC;AACA,WAAKH,MAAL,CAAYQ,IAAZ;;AACA,WAAKL,cAAL,CAAoBM,YAApB,GAAmC,YAAM;AACrC,QAAA,KAAI,CAACC,IAAL;AACH,OAFD;AAGH;AAED;AACJ;AACA;;;;2BACU;AACF,WAAKV,MAAL,CAAYU,IAAZ,GACKC,IADL,CACU,YAAM,CAAE,CADlB,WAEW,UAACC,CAAD,EAAO,CAAE,CAFpB;AAGH;AAED;AACJ;AACA;;;;4BACW;AACH,WAAKZ,MAAL,CAAYa,KAAZ;AACH;AAED;AACJ;AACA;;;;8BACa;AACL,WAAKb,MAAL,CAAYa,KAAZ;AACA,WAAKb,MAAL,CAAYc,MAAZ;AACA,WAAKd,MAAL,CAAYe,kBAAZ;AACA,WAAKf,MAAL,CAAYgB,OAAZ;AACA,WAAKhB,MAAL,GAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;;qCACoB;AACZ,UAAG,KAAKA,MAAR,EAAe;AACX,eAAO,KAAKA,MAAL,CAAYiB,WAAnB;AACH;;AACD,aAAO,CAAP;AACH;AAED;AACJ;AACA;AACA;;;;mCACmBC,I,EAAK;AAChB,WAAKlB,MAAL,CAAYiB,WAAZ,GAA0BC,IAA1B;AACA,WAAKC,iBAAL;AACH;;;wCAEkB;AACf,WAAKnB,MAAL,CAAYiB,WAAZ,GAA0B,KAAKjB,MAAL,CAAYiB,WAAZ,GAA0B,GAApD;AACH;AAED;AACJ;AACA;;;;iCACiBC,I,EAAK;AACd,WAAKE,cAAL,CAAoB,KAAKC,cAAL,KAAwBH,IAA5C;AACH;AAED;AACJ;AACA;AACA;;;;iCACgB;AACR,WAAKlB,MAAL,CAAYsB,KAAZ,GAAoB,KAAKtB,MAAL,CAAYsB,KAAZ,GAAoB,KAAxC,GAAgD,KAAKtB,MAAL,CAAYsB,KAAZ,GAAoB,IAApE;AACA,aAAO,KAAKtB,MAAL,CAAYsB,KAAnB;AACH;AAED;AACJ;AACA;AACA;;;;kCACkB;AACV,UAAG,KAAKtB,MAAL,CAAYuB,QAAZ,KAAyBC,GAA5B,EAAgC,CAE/B;;AACD,aAAO,KAAKxB,MAAL,CAAYuB,QAAnB;AACH;AAGD;AACJ;AACA;;;;kCACiB;AACT,WAAKH,cAAL,CAAoB,CAApB;AACA,WAAKV,IAAL;AACH;AAED;AACJ;AACA;AACA;;;;iCACiBe,I,EAAK;AACd,WAAKtB,cAAL,CAAoBuB,YAApB,GAAmCD,IAAnC;AACH;;;sCAEgB;AACb,aAAO,KAAKtB,cAAZ;AACH;;;;;;SA3HgBV,M","sourcesContent":["export default class Player{\n    constructor(mediaDataSource, container) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n        this.mediaContainer = document.getElementById(container);\n        this.init(container);\n    }\n\n    /**\n     * 初始化播放器并自动播放视频\n     * @param container 视频播放容器\n     */\n    init(container){\n        this.player.attachMediaElement(this.mediaContainer);\n        this.player.load();\n        this.mediaContainer.onloadeddata = () => {\n            this.play();\n        }\n    }\n\n    /**\n     * 开始播放视频\n     */\n    play(){\n        this.player.play()\n            .then(() => {})\n            .catch((e) => {});\n    }\n\n    /**\n     * 暂停当前播放进度\n     */\n    pause(){\n        this.player.pause();\n    }\n\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n    destroy(){\n        this.player.pause();\n        this.player.unload();\n        this.player.detachMediaElement();\n        this.player.destroy();\n        this.player = null;\n    }\n\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n    getCurrentTime(){\n        if(this.player){\n            return this.player.currentTime;\n        }\n        return 0;\n    }\n\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n    setCurrentTime(time){\n        this.player.currentTime = time;\n        this.pushMillionSecond();\n    }\n\n    pushMillionSecond(){\n        this.player.currentTime = this.player.currentTime + 0.1;\n    }\n\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n    jumpOverTime(time){\n        this.setCurrentTime(this.getCurrentTime() + time)\n    }\n\n    /**\n     * 播放器的静音开关\n     * @returns {string|boolean|*} 返回 true 如果当前播放器已经静音，否则返回 false\n     */\n    muteSwitch(){\n        this.player.muted ? this.player.muted = false : this.player.muted = true;\n        return this.player.muted\n    }\n\n    /**\n     * 获取当前播放的数据流视频长度\n     * @returns {*} 视频总播放长度\n     */\n    getDuration() {\n        if(this.player.duration === NaN){\n            \n        }\n        return this.player.duration;\n    }\n\n\n    /**\n     * 重新播放当前视频\n     */\n    replayVideo(){\n        this.setCurrentTime(0);\n        this.play();\n    }\n\n    /**\n     * 设置视频播放倍速\n     * @param rate 需要设置的播放倍速\n     */\n    setPlaySpeed(rate){\n        this.mediaContainer.playbackRate = rate;\n    }\n\n    getMediaElement(){\n        return this.mediaContainer;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}