{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport { convertDuration } from \"./utils\";\nexport default class Player {\n  constructor(mediaDataSource, container) {\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n    this.mediaContainer = document.getElementById(container);\n    this.process = null;\n    this.init(container);\n  }\n  /**\n   * 初始化播放器并自动播放视频\n   * @param container 视频播放容器\n   */\n\n\n  init(container) {\n    this.player.attachMediaElement(this.mediaContainer);\n    this.player.load();\n\n    this.mediaContainer.onloadeddata = () => {\n      this.play();\n    };\n  }\n  /**\n   * 开始播放视频\n   */\n\n\n  play() {\n    this.player.play().then(() => {\n      clearInterval(this.timer);\n      this.getProcessTime();\n    }).catch(e => {});\n  }\n  /**\n   * 暂停当前播放进度\n   */\n\n\n  pause() {\n    this.player.pause();\n  }\n  /**\n   * 销毁当前FlvPlayer对象\n   */\n\n\n  destroy() {\n    this.player.pause();\n    this.player.unload();\n    clearInterval(this.process);\n    this.player.detachMediaElement();\n    this.player.destroy();\n    this.player = null;\n    this.process = null;\n  }\n  /**\n   * 获取当前视频播放时间进度\n   * @return 当前播放进度时间\n   */\n\n\n  getCurrentTime() {\n    if (this.player) {\n      return this.player.currentTime;\n    }\n\n    return 0;\n  }\n  /**\n   * 设置视频进度位置\n   * @param time 要跳转到的视频播放时间\n   */\n\n\n  setCurrentTime(time) {\n    this.player.currentTime = time;\n    this.pushMillionSecond();\n  }\n\n  pushMillionSecond() {\n    this.player.currentTime = this.player.currentTime + 0.1;\n  }\n  /**\n   * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n   */\n\n\n  jumpOverTime(time) {\n    this.setCurrentTime(this.getCurrentTime() + time);\n  }\n  /**\n   * 播放器的静音开关\n   * @returns {string|boolean|*} 返回 true 如果当前播放器已经静音，否则返回 false\n   */\n\n\n  muteSwitch() {\n    this.player.muted ? this.player.muted = false : this.player.muted = true;\n    return this.player.muted;\n  }\n  /**\n   * 获取当前播放的数据流视频长度\n   * @returns {*} 视频总播放长度\n   */\n\n\n  getDuration() {\n    if (isNaN(this.player.duration)) {\n      return 0;\n    }\n\n    return this.player.duration;\n  }\n  /**\n   * 重新播放当前视频\n   */\n\n\n  replayVideo() {\n    this.setCurrentTime(0);\n    this.play();\n  }\n  /**\n   * 设置视频播放倍速\n   * @param rate 需要设置的播放倍速\n   */\n\n\n  setPlaySpeed(rate) {\n    this.mediaContainer.playbackRate = rate;\n  }\n  /**\n   * 获取播放媒体容器\n   * @returns {HTMLElement} 媒体容器元素\n   */\n\n\n  getMediaElement() {\n    return this.mediaContainer;\n  }\n\n  getProcessTime() {\n    if (this.getCurrentTime() <= this.getDuration()) {\n      this.process = setInterval(() => {\n        console.log(convertDuration(this.getCurrentTime() + 1) + \"/\" + convertDuration(this.getDuration()));\n      }, 1000);\n    }\n  }\n\n}","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["convertDuration","Player","constructor","mediaDataSource","container","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","mediaContainer","document","getElementById","process","init","attachMediaElement","load","onloadeddata","play","then","clearInterval","timer","getProcessTime","catch","e","pause","destroy","unload","detachMediaElement","getCurrentTime","currentTime","setCurrentTime","time","pushMillionSecond","jumpOverTime","muteSwitch","muted","getDuration","isNaN","duration","replayVideo","setPlaySpeed","rate","playbackRate","getMediaElement","setInterval","console","log"],"mappings":";;;;;;AAAA,SAAQA,eAAR,QAA8B,SAA9B;AAEA,eAAe,MAAMC,MAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,SAAlB,EAA6B;AACpC,SAAKD,eAAL;AACIE,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOL,eALP;AAOA,SAAKM,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKR,eAAxB,CAAd;AACA,SAAKS,cAAL,GAAsBC,QAAQ,CAACC,cAAT,CAAwBV,SAAxB,CAAtB;AACA,SAAKW,OAAL,GAAe,IAAf;AACA,SAAKC,IAAL,CAAUZ,SAAV;AACH;AAED;AACJ;AACA;AACA;;;AACIY,EAAAA,IAAI,CAACZ,SAAD,EAAW;AACX,SAAKK,MAAL,CAAYQ,kBAAZ,CAA+B,KAAKL,cAApC;AACA,SAAKH,MAAL,CAAYS,IAAZ;;AACA,SAAKN,cAAL,CAAoBO,YAApB,GAAmC,MAAM;AACrC,WAAKC,IAAL;AACH,KAFD;AAGH;AAED;AACJ;AACA;;;AACIA,EAAAA,IAAI,GAAE;AACF,SAAKX,MAAL,CAAYW,IAAZ,GACKC,IADL,CACU,MAAM;AACRC,MAAAA,aAAa,CAAC,KAAKC,KAAN,CAAb;AACA,WAAKC,cAAL;AACH,KAJL,EAKKC,KALL,CAKYC,CAAD,IAAO,CAAE,CALpB;AAMH;AAED;AACJ;AACA;;;AACIC,EAAAA,KAAK,GAAE;AACH,SAAKlB,MAAL,CAAYkB,KAAZ;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAE;AACL,SAAKnB,MAAL,CAAYkB,KAAZ;AACA,SAAKlB,MAAL,CAAYoB,MAAZ;AACAP,IAAAA,aAAa,CAAC,KAAKP,OAAN,CAAb;AACA,SAAKN,MAAL,CAAYqB,kBAAZ;AACA,SAAKrB,MAAL,CAAYmB,OAAZ;AACA,SAAKnB,MAAL,GAAc,IAAd;AACA,SAAKM,OAAL,GAAe,IAAf;AACH;AAED;AACJ;AACA;AACA;;;AACIgB,EAAAA,cAAc,GAAE;AACZ,QAAG,KAAKtB,MAAR,EAAe;AACX,aAAO,KAAKA,MAAL,CAAYuB,WAAnB;AACH;;AACD,WAAO,CAAP;AACH;AAED;AACJ;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACC,IAAD,EAAM;AAChB,SAAKzB,MAAL,CAAYuB,WAAZ,GAA0BE,IAA1B;AACA,SAAKC,iBAAL;AACH;;AAEDA,EAAAA,iBAAiB,GAAE;AACf,SAAK1B,MAAL,CAAYuB,WAAZ,GAA0B,KAAKvB,MAAL,CAAYuB,WAAZ,GAA0B,GAApD;AACH;AAED;AACJ;AACA;;;AACII,EAAAA,YAAY,CAACF,IAAD,EAAM;AACd,SAAKD,cAAL,CAAoB,KAAKF,cAAL,KAAwBG,IAA5C;AACH;AAED;AACJ;AACA;AACA;;;AACIG,EAAAA,UAAU,GAAE;AACR,SAAK5B,MAAL,CAAY6B,KAAZ,GAAoB,KAAK7B,MAAL,CAAY6B,KAAZ,GAAoB,KAAxC,GAAgD,KAAK7B,MAAL,CAAY6B,KAAZ,GAAoB,IAApE;AACA,WAAO,KAAK7B,MAAL,CAAY6B,KAAnB;AACH;AAED;AACJ;AACA;AACA;;;AACIC,EAAAA,WAAW,GAAG;AACV,QAAGC,KAAK,CAAC,KAAK/B,MAAL,CAAYgC,QAAb,CAAR,EAA+B;AAC3B,aAAO,CAAP;AACH;;AACD,WAAO,KAAKhC,MAAL,CAAYgC,QAAnB;AACH;AAGD;AACJ;AACA;;;AACIC,EAAAA,WAAW,GAAE;AACT,SAAKT,cAAL,CAAoB,CAApB;AACA,SAAKb,IAAL;AACH;AAED;AACJ;AACA;AACA;;;AACIuB,EAAAA,YAAY,CAACC,IAAD,EAAM;AACd,SAAKhC,cAAL,CAAoBiC,YAApB,GAAmCD,IAAnC;AACH;AAED;AACJ;AACA;AACA;;;AACIE,EAAAA,eAAe,GAAE;AACb,WAAO,KAAKlC,cAAZ;AACH;;AAEDY,EAAAA,cAAc,GAAE;AACZ,QAAG,KAAKO,cAAL,MAAyB,KAAKQ,WAAL,EAA5B,EAA+C;AAC3C,WAAKxB,OAAL,GAAegC,WAAW,CAAC,MAAM;AAC7BC,QAAAA,OAAO,CAACC,GAAR,CAAYjD,eAAe,CAAC,KAAK+B,cAAL,KAAwB,CAAzB,CAAf,GAA2C,GAA3C,GAA+C/B,eAAe,CAAC,KAAKuC,WAAL,EAAD,CAA1E;AACH,OAFyB,EAEvB,IAFuB,CAA1B;AAGH;AACJ;;AA7IsB","sourcesContent":["import {convertDuration} from \"./utils\";\n\nexport default class Player{\n    constructor(mediaDataSource, container) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n        this.mediaContainer = document.getElementById(container);\n        this.process = null;\n        this.init(container);\n    }\n\n    /**\n     * 初始化播放器并自动播放视频\n     * @param container 视频播放容器\n     */\n    init(container){\n        this.player.attachMediaElement(this.mediaContainer);\n        this.player.load();\n        this.mediaContainer.onloadeddata = () => {\n            this.play();\n        }\n    }\n\n    /**\n     * 开始播放视频\n     */\n    play(){\n        this.player.play()\n            .then(() => {\n                clearInterval(this.timer);\n                this.getProcessTime();\n            })\n            .catch((e) => {});\n    }\n\n    /**\n     * 暂停当前播放进度\n     */\n    pause(){\n        this.player.pause();\n    }\n\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n    destroy(){\n        this.player.pause();\n        this.player.unload();\n        clearInterval(this.process);\n        this.player.detachMediaElement();\n        this.player.destroy();\n        this.player = null;\n        this.process = null;\n    }\n\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n    getCurrentTime(){\n        if(this.player){\n            return this.player.currentTime;\n        }\n        return 0;\n    }\n\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n    setCurrentTime(time){\n        this.player.currentTime = time;\n        this.pushMillionSecond();\n    }\n\n    pushMillionSecond(){\n        this.player.currentTime = this.player.currentTime + 0.1;\n    }\n\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n    jumpOverTime(time){\n        this.setCurrentTime(this.getCurrentTime() + time)\n    }\n\n    /**\n     * 播放器的静音开关\n     * @returns {string|boolean|*} 返回 true 如果当前播放器已经静音，否则返回 false\n     */\n    muteSwitch(){\n        this.player.muted ? this.player.muted = false : this.player.muted = true;\n        return this.player.muted\n    }\n\n    /**\n     * 获取当前播放的数据流视频长度\n     * @returns {*} 视频总播放长度\n     */\n    getDuration() {\n        if(isNaN(this.player.duration)){\n            return 0;\n        }\n        return this.player.duration;\n    }\n\n\n    /**\n     * 重新播放当前视频\n     */\n    replayVideo(){\n        this.setCurrentTime(0);\n        this.play();\n    }\n\n    /**\n     * 设置视频播放倍速\n     * @param rate 需要设置的播放倍速\n     */\n    setPlaySpeed(rate){\n        this.mediaContainer.playbackRate = rate;\n    }\n\n    /**\n     * 获取播放媒体容器\n     * @returns {HTMLElement} 媒体容器元素\n     */\n    getMediaElement(){\n        return this.mediaContainer;\n    }\n\n    getProcessTime(){\n        if(this.getCurrentTime() <= this.getDuration()){\n            this.process = setInterval(() => {\n                console.log(convertDuration(this.getCurrentTime() + 1)+\"/\"+convertDuration(this.getDuration()));\n            }, 1000);\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}