{"ast":null,"code":"import _defineProperty from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Player = /*#__PURE__*/function () {\n  function Player(mediaDataSource) {\n    _classCallCheck(this, Player);\n\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n  }\n\n  _createClass(Player, [{\n    key: \"init\",\n    value: function init(container) {\n      var _this = this;\n\n      this.player.attachMediaElement(document.getElementById(container));\n      this.player.load();\n      this.player.on(flvjs.Events.LOADING_COMPLETE, function () {\n        _this.play();\n      });\n      return this.player;\n    }\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.player && this.player.play();\n    }\n  }, {\n    key: \"pause\",\n    value: function pause() {}\n  }, {\n    key: \"destroy\",\n    value: function destroy() {}\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.player.currentTime;\n    }\n  }, {\n    key: \"setCurrentTime\",\n    value: function setCurrentTime(time) {\n      this.player.currentTime = time;\n    }\n  }, {\n    key: \"pushCurrentTime\",\n    value: function pushCurrentTime() {\n      this.setCurrentTime(0.1);\n    }\n  }]);\n\n  return Player;\n}();\n\nexport { Player as default };","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","mediaDataSource","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","container","attachMediaElement","document","getElementById","load","on","Events","LOADING_COMPLETE","play","currentTime","time","setCurrentTime"],"mappings":";;;;;;;;IAAqBA,M;AACjB,kBAAYC,eAAZ,EAA6B;AAAA;;AACzB,SAAKA,eAAL;AACIC,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOJ,eALP;AAOA,SAAKK,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKP,eAAxB,CAAd;AACH;;;;yBAEIQ,S,EAAU;AAAA;;AACX,WAAKH,MAAL,CAAYI,kBAAZ,CAA+BC,QAAQ,CAACC,cAAT,CAAwBH,SAAxB,CAA/B;AACA,WAAKH,MAAL,CAAYO,IAAZ;AACA,WAAKP,MAAL,CAAYQ,EAAZ,CAAeP,KAAK,CAACQ,MAAN,CAAaC,gBAA5B,EAA8C,YAAM;AAChD,QAAA,KAAI,CAACC,IAAL;AACH,OAFD;AAGA,aAAO,KAAKX,MAAZ;AACH;;;2BAEK;AACF,WAAKA,MAAL,IAAe,KAAKA,MAAL,CAAYW,IAAZ,EAAf;AACH;;;4BAEM,CAEN;;;8BAEQ,CAER;;;qCAEe;AACZ,aAAO,KAAKX,MAAL,CAAYY,WAAnB;AACH;;;mCAEcC,I,EAAK;AAChB,WAAKb,MAAL,CAAYY,WAAZ,GAA0BC,IAA1B;AACH;;;sCAEgB;AACb,WAAKC,cAAL,CAAoB,GAApB;AACH;;;;;;SA3CgBpB,M","sourcesContent":["export default class Player{\n    constructor(mediaDataSource) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n    }\n\n    init(container){\n        this.player.attachMediaElement(document.getElementById(container));\n        this.player.load();\n        this.player.on(flvjs.Events.LOADING_COMPLETE, () => {\n            this.play();\n        })\n        return this.player;\n    }\n\n    play(){\n        this.player && this.player.play();\n    }\n\n    pause(){\n\n    }\n\n    destroy(){\n\n    }\n\n    getCurrentTime(){\n        return this.player.currentTime;\n    }\n\n    setCurrentTime(time){\n        this.player.currentTime = time;\n    }\n\n    pushCurrentTime(){\n        this.setCurrentTime(0.1);\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}