{"ast":null,"code":"import _defineProperty from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Player = /*#__PURE__*/function () {\n  function Player(mediaDataSource, container) {\n    _classCallCheck(this, Player);\n\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n    this.init(container);\n  }\n  /**\n   * 初始化播放器并自动播放视频\n   * @param container 视频播放容器\n   */\n\n\n  _createClass(Player, [{\n    key: \"init\",\n    value: function init(container) {\n      this.player.attachMediaElement(document.getElementById(container));\n      this.player.load();\n      this.play();\n    }\n    /**\n     * 开始播放视频\n     */\n\n  }, {\n    key: \"play\",\n    value: function play() {\n      this.player.play().then(function () {\n        flvjs.LoggingControl.applyConfig({\n          enableAll: false\n        });\n      })[\"catch\"](function (e) {});\n    }\n    /**\n     * 暂停当前播放进度\n     */\n\n  }, {\n    key: \"pause\",\n    value: function pause() {\n      this.player.pause();\n    }\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n\n  }, {\n    key: \"destroy\",\n    value: function destroy() {\n      this.player.pause();\n      this.player.unload();\n      this.player.detachMediaElement();\n      this.player.destroy();\n      this.player = null;\n    }\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n\n  }, {\n    key: \"getCurrentTime\",\n    value: function getCurrentTime() {\n      return this.player.currentTime;\n    }\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n\n  }, {\n    key: \"setCurrentTime\",\n    value: function setCurrentTime(time) {\n      this.player.currentTime = this.player.currentTime + time;\n    }\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n\n  }, {\n    key: \"jumpCurrentTime\",\n    value: function jumpCurrentTime() {\n      this.setCurrentTime(0.1);\n    }\n    /**\n     * 静音当前播放器\n     */\n\n  }, {\n    key: \"muteSwitch\",\n    value: function muteSwitch() {\n      if (this.player.muted) {\n        this.player.muted = false;\n      } else {\n        this.player.muted = true;\n      }\n    }\n  }]);\n\n  return Player;\n}();\n\nexport { Player as default };","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","mediaDataSource","container","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","init","attachMediaElement","document","getElementById","load","play","then","LoggingControl","applyConfig","enableAll","e","pause","unload","detachMediaElement","destroy","currentTime","time","setCurrentTime","muted"],"mappings":";;;;;;;;IAAqBA,M;AACjB,kBAAYC,eAAZ,EAA6BC,SAA7B,EAAwC;AAAA;;AACpC,SAAKD,eAAL;AACIE,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOL,eALP;AAOA,SAAKM,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKR,eAAxB,CAAd;AACA,SAAKS,IAAL,CAAUR,SAAV;AACH;AAED;AACJ;AACA;AACA;;;;;yBACSA,S,EAAU;AACX,WAAKK,MAAL,CAAYI,kBAAZ,CAA+BC,QAAQ,CAACC,cAAT,CAAwBX,SAAxB,CAA/B;AACA,WAAKK,MAAL,CAAYO,IAAZ;AACA,WAAKC,IAAL;AACH;AAED;AACJ;AACA;;;;2BACU;AACF,WAAKR,MAAL,CAAYQ,IAAZ,GACKC,IADL,CACU,YAAM;AACRR,QAAAA,KAAK,CAACS,cAAN,CAAqBC,WAArB,CAAiC;AAC7BC,UAAAA,SAAS,EAAE;AADkB,SAAjC;AAGH,OALL,WAMW,UAACC,CAAD,EAAO,CAAE,CANpB;AAOH;AAED;AACJ;AACA;;;;4BACW;AACH,WAAKb,MAAL,CAAYc,KAAZ;AACH;AAED;AACJ;AACA;;;;8BACa;AACL,WAAKd,MAAL,CAAYc,KAAZ;AACA,WAAKd,MAAL,CAAYe,MAAZ;AACA,WAAKf,MAAL,CAAYgB,kBAAZ;AACA,WAAKhB,MAAL,CAAYiB,OAAZ;AACA,WAAKjB,MAAL,GAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;;qCACoB;AACZ,aAAO,KAAKA,MAAL,CAAYkB,WAAnB;AACH;AAED;AACJ;AACA;AACA;;;;mCACmBC,I,EAAK;AAChB,WAAKnB,MAAL,CAAYkB,WAAZ,GAA0B,KAAKlB,MAAL,CAAYkB,WAAZ,GAA0BC,IAApD;AACH;AAED;AACJ;AACA;;;;sCACqB;AACb,WAAKC,cAAL,CAAoB,GAApB;AACH;AAED;AACJ;AACA;;;;iCACgB;AACR,UAAG,KAAKpB,MAAL,CAAYqB,KAAf,EAAqB;AACjB,aAAKrB,MAAL,CAAYqB,KAAZ,GAAoB,KAApB;AACH,OAFD,MAEK;AACD,aAAKrB,MAAL,CAAYqB,KAAZ,GAAoB,IAApB;AACH;AACJ;;;;;;SAtFgB5B,M","sourcesContent":["export default class Player{\n    constructor(mediaDataSource, container) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n        this.init(container);\n    }\n\n    /**\n     * 初始化播放器并自动播放视频\n     * @param container 视频播放容器\n     */\n    init(container){\n        this.player.attachMediaElement(document.getElementById(container));\n        this.player.load();\n        this.play();\n    }\n\n    /**\n     * 开始播放视频\n     */\n    play(){\n        this.player.play()\n            .then(() => {\n                flvjs.LoggingControl.applyConfig({\n                    enableAll: false\n                });\n            })\n            .catch((e) => {});\n    }\n\n    /**\n     * 暂停当前播放进度\n     */\n    pause(){\n        this.player.pause();\n    }\n\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n    destroy(){\n        this.player.pause();\n        this.player.unload();\n        this.player.detachMediaElement();\n        this.player.destroy();\n        this.player = null;\n    }\n\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n    getCurrentTime(){\n        return this.player.currentTime;\n    }\n\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n    setCurrentTime(time){\n        this.player.currentTime = this.player.currentTime + time;\n    }\n\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n    jumpCurrentTime(){\n        this.setCurrentTime(0.1);\n    }\n\n    /**\n     * 静音当前播放器\n     */\n    muteSwitch(){\n        if(this.player.muted){\n            this.player.muted = false;\n        }else{\n            this.player.muted = true;\n        }\n    }\n}\n"]},"metadata":{},"sourceType":"module"}