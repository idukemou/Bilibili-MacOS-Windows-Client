{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React, { useEffect, useRef, useState } from 'react';\nimport store from \"../../redux/store\";\nimport electron from 'electron';\nimport { getRecommendListAction, playVideoInfoAction, appendRecommendListAction, platVideoStatusAction } from \"../../redux/actionCreators\";\nimport { convertDuration, convertViews } from \"../../utils/utils\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nif (ipcRenderer) {\n  ipcRenderer.send('request_recommend_list');\n  ipcRenderer.on('fetch_recommend_list', async (event, data) => {\n    store.dispatch(await getRecommendListAction(data));\n  });\n}\n/**\n * Recommend UI Component.\n * @param props the props from its parent component\n * @returns {JSX.Element} the UI parts used for rendering\n * @constructor none\n */\n\n\nfunction RecommendUI(props) {\n  const box = useRef(null);\n  const data = props.videoInfo;\n  const interval = 1;\n  const {\n    0: offsetTop,\n    1: setOffsetTop\n  } = useState(0);\n  const {\n    0: display,\n    1: setDisplay\n  } = useState(true);\n  useEffect(() => {\n    if (props.clientData.scrollTop - offsetTop * interval > 0 || offsetTop - 240 * interval - props.clientData.scrollTop > props.clientData.clientHeight) {\n      setDisplay(false);\n    } else {\n      setDisplay(true);\n    }\n  });\n  useEffect(() => {\n    setOffsetTop(box.current.offsetTop + 220);\n  }, [offsetTop]);\n\n  function playVideo(bvid) {\n    ipcRenderer.send('request_video_play_info', bvid);\n    ipcRenderer.once('fetch_video_play_info', async (event, data) => {\n      store.dispatch(await playVideoInfoAction(data));\n    });\n    store.dispatch(platVideoStatusAction(true));\n    ipcRenderer.removeAllListeners('request_video_play_info');\n  }\n  /**\n   * return UI Component\n   */\n\n\n  return /*#__PURE__*/_jsx(\"div\", {\n    className: \"rcmd-item\",\n    ref: box,\n    onClick: () => playVideo(data.bvid),\n    children: /*#__PURE__*/_jsxs(\"div\", {\n      className: 'rcmd-item-wrapper',\n      style: {\n        display: display ? 'block' : 'none'\n      },\n      children: [/*#__PURE__*/_jsxs(\"div\", {\n        className: \"rcmd-item-info-wrapper\",\n        children: [/*#__PURE__*/_jsx(\"img\", {\n          src: data.pic,\n          alt: data.title,\n          className: \"rcmd-item-image\"\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"rcmd-item-stat\",\n          children: [/*#__PURE__*/_jsxs(\"span\", {\n            className: \"rcmd-item-duration\",\n            children: [\" \", convertDuration(data.duration), \" \"]\n          }), /*#__PURE__*/_jsxs(\"span\", {\n            className: \"rcmd-item-views\",\n            children: [\" \", convertViews(data.stat.view), \"\\u89C2\\u770B \"]\n          })]\n        })]\n      }), /*#__PURE__*/_jsxs(\"div\", {\n        className: \"rcmd-item-title-wrapper\",\n        children: [/*#__PURE__*/_jsx(\"div\", {\n          className: \"rcmd-item-owner\",\n          children: /*#__PURE__*/_jsx(\"img\", {\n            src: data.owner.face,\n            alt: data.owner.name\n          })\n        }), /*#__PURE__*/_jsx(\"div\", {\n          className: \"rcmd-item-title\",\n          children: /*#__PURE__*/_jsxs(\"strong\", {\n            children: [\" \", data.title, \" \"]\n          })\n        })]\n      })]\n    })\n  });\n}\n/**\n * Recommend Section Component\n * @param props the props from parent component\n * @returns {JSX.Element} the Recommend UI parts used for rendering\n * @constructor none\n */\n\n\nexport default function Recommend(props) {\n  const {\n    0: recommendList,\n    1: setRecommendList\n  } = useState(store.getState().recommendList);\n  const {\n    0: locker,\n    1: setLocker\n  } = useState(false);\n  /**\n   * Effect for update value of commendList\n   */\n\n  useEffect(() => {\n    store.subscribe(() => {\n      setRecommendList(store.getState().recommendList);\n    });\n  }, [store.getState().recommendList]);\n  /**\n   * Effect for update value of loading\n   */\n\n  useEffect(() => {\n    if (props.loading && !locker) {\n      loadMore();\n      setLocker(false);\n    }\n  }, [props.loading]);\n  /**\n   * request more data from API\n   */\n\n  function loadMore() {\n    setLocker(true);\n\n    if (ipcRenderer) {\n      ipcRenderer.invoke('request_recommend_list_append').then(data => {\n        const temp = recommendList.concat(data.item); // setRecommendList(temp);\n\n        store.dispatch(appendRecommendListAction(temp));\n      });\n    }\n  }\n  /**\n   * return UI Components\n   */\n\n\n  return /*#__PURE__*/_jsx(_Fragment, {\n    children: recommendList.map((list, index) => /*#__PURE__*/_jsx(RecommendUI, _objectSpread({\n      videoInfo: list\n    }, props), index))\n  });\n}","map":null,"metadata":{},"sourceType":"module"}