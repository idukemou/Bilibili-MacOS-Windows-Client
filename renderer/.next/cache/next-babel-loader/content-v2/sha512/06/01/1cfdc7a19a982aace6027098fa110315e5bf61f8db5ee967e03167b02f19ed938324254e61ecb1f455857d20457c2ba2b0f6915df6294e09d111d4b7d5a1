{"ast":null,"code":"import { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from \"react\";\nimport store from \"../../redux/store\";\nexport default class ContentFrame extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      availableSize: store.getState().availableSize\n    };\n    store.subscribe(() => this.setState({\n      availableSize: store.getState().availableSize\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"section\", {\n      style: {\n        width: `${this.props.children.length * 100}%`,\n        height: `${this.state.availableSize.height}px`,\n        overflow: 'hidden',\n        position: 'absolute',\n        transition: 'left 0.3s',\n        left: `${this.props.activeIndex * -this.state.availableSize.width}px`\n      },\n      children: this.props.children\n    });\n  }\n\n}\nexport class Content extends React.PureComponent {\n  constructor(props) {\n    super(props);\n    this.state = {\n      availableSize: store.getState().availableSize,\n      windowHeight: 0,\n      currentHeight: 0,\n      loading: false,\n      scrollTop: 0\n    };\n    store.subscribe(() => this.setState({\n      availableSize: store.getState().availableSize\n    }));\n  }\n\n  componentDidMount() {\n    const _this = this;\n\n    this.ref.addEventListener('scroll', () => {\n      this.setState({\n        scrollTop: _this.ref.scrollTop\n      });\n\n      if (_this.ref.scrollHeight - _this.state.availableSize.height === _this.ref.scrollTop) {\n        this.setState({\n          loading: true\n        });\n      } else {\n        this.setState({\n          loading: false\n        });\n      }\n    });\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(\"section\", {\n      style: {\n        width: this.state.availableSize.width + 'px',\n        height: this.state.availableSize.height + 'px',\n        float: \"left\",\n        overflow: 'hidden',\n        display: 'flex',\n        flexWrap: 'wrap',\n        justifyContent: 'center',\n        alignContent: 'flex-start'\n      },\n      children: /*#__PURE__*/_jsx(\"section\", {\n        ref: ref => this.ref = ref,\n        className: \"recommend-item-wrapper\",\n        style: {\n          width: this.state.availableSize.width + 'px',\n          height: this.state.availableSize.height + 'px'\n        },\n        children: React.Children.map(this.props.children, child => {\n          if (! /*#__PURE__*/React.isValidElement(child)) {\n            return null;\n          }\n\n          const childProps = _objectSpread(_objectSpread({}, child.props), {}, {\n            loading: this.state.loading,\n            position: this.state.scrollTop\n          });\n\n          return /*#__PURE__*/React.cloneElement(child, childProps);\n        })\n      })\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}