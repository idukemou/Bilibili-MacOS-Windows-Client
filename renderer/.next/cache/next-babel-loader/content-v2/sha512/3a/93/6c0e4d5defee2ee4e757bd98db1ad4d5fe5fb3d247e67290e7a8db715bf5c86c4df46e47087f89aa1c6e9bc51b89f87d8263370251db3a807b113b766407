{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class Player {\n  constructor(mediaDataSource, container) {\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n    this.init(container);\n  }\n\n  init(container) {\n    this.destroy();\n    this.player.attachMediaElement(document.getElementById(container));\n    this.player.load();\n    this.play();\n  }\n\n  play() {\n    this.player.play().catch(e => {});\n  }\n\n  pause() {\n    this.player.pause();\n  }\n\n  destroy() {\n    this.player.pause();\n    this.player.unload();\n    this.player.detachMediaElement();\n    this.player.destroy();\n    this.player = null;\n  }\n\n  getCurrentTime() {\n    return this.player.currentTime;\n  }\n\n  setCurrentTime(time) {\n    this.player.currentTime = this.player.currentTime + time;\n  }\n\n  jumpCurrentTime() {\n    this.setCurrentTime(0.1);\n  }\n\n}","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","constructor","mediaDataSource","container","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","init","destroy","attachMediaElement","document","getElementById","load","play","catch","e","pause","unload","detachMediaElement","getCurrentTime","currentTime","setCurrentTime","time","jumpCurrentTime"],"mappings":";;;;;;AAAA,eAAe,MAAMA,MAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,SAAlB,EAA6B;AACpC,SAAKD,eAAL;AACIE,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOL,eALP;AAOA,SAAKM,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKR,eAAxB,CAAd;AACA,SAAKS,IAAL,CAAUR,SAAV;AACH;;AAEDQ,EAAAA,IAAI,CAACR,SAAD,EAAW;AACX,SAAKS,OAAL;AACA,SAAKJ,MAAL,CAAYK,kBAAZ,CAA+BC,QAAQ,CAACC,cAAT,CAAwBZ,SAAxB,CAA/B;AACA,SAAKK,MAAL,CAAYQ,IAAZ;AACA,SAAKC,IAAL;AACH;;AAEDA,EAAAA,IAAI,GAAE;AACF,SAAKT,MAAL,CAAYS,IAAZ,GAAmBC,KAAnB,CAA0BC,CAAD,IAAO,CAAE,CAAlC;AACH;;AAEDC,EAAAA,KAAK,GAAE;AACH,SAAKZ,MAAL,CAAYY,KAAZ;AACH;;AAEDR,EAAAA,OAAO,GAAE;AACL,SAAKJ,MAAL,CAAYY,KAAZ;AACA,SAAKZ,MAAL,CAAYa,MAAZ;AACA,SAAKb,MAAL,CAAYc,kBAAZ;AACA,SAAKd,MAAL,CAAYI,OAAZ;AACA,SAAKJ,MAAL,GAAc,IAAd;AACH;;AAEDe,EAAAA,cAAc,GAAE;AACZ,WAAO,KAAKf,MAAL,CAAYgB,WAAnB;AACH;;AAEDC,EAAAA,cAAc,CAACC,IAAD,EAAM;AAChB,SAAKlB,MAAL,CAAYgB,WAAZ,GAA0B,KAAKhB,MAAL,CAAYgB,WAAZ,GAA0BE,IAApD;AACH;;AAEDC,EAAAA,eAAe,GAAE;AACb,SAAKF,cAAL,CAAoB,GAApB;AACH;;AA9CsB","sourcesContent":["export default class Player{\n    constructor(mediaDataSource, container) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n        this.init(container);\n    }\n\n    init(container){\n        this.destroy();\n        this.player.attachMediaElement(document.getElementById(container));\n        this.player.load();\n        this.play();\n    }\n\n    play(){\n        this.player.play().catch((e) => {});\n    }\n\n    pause(){\n        this.player.pause();\n    }\n\n    destroy(){\n        this.player.pause();\n        this.player.unload();\n        this.player.detachMediaElement();\n        this.player.destroy();\n        this.player = null;\n    }\n\n    getCurrentTime(){\n        return this.player.currentTime;\n    }\n\n    setCurrentTime(time){\n        this.player.currentTime = this.player.currentTime + time;\n    }\n\n    jumpCurrentTime(){\n        this.setCurrentTime(0.1);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}