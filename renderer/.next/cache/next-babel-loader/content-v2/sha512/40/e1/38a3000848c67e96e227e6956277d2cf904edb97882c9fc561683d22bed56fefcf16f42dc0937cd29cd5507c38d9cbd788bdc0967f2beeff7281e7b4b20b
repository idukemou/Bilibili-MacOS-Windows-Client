{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport React from 'react';\nimport store from \"../../redux/store\";\nimport electron from 'electron';\nimport { getRecommendListAction } from \"../../redux/actionCreators\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nif (ipcRenderer) {\n  ipcRenderer.send('request_recommend_list');\n  ipcRenderer.on('fetch_recommend_list', async (event, data) => {\n    store.dispatch(await getRecommendListAction(data));\n  });\n}\n\nfunction RecommendUI(props) {\n  const data = props.data;\n  return /*#__PURE__*/_jsxs(\"div\", {\n    className: \"rcmd-item\",\n    children: [/*#__PURE__*/_jsx(\"img\", {\n      src: data.pic,\n      alt: data.title,\n      referrer: \"no-referrer\",\n      style: {\n        width: 230,\n        height: 120\n      }\n    }), data.title]\n  });\n}\n\nexport default class Recommend extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      recommendList: store.getState().recommendList\n    };\n    store.subscribe(() => this.setState({\n      recommendList: store.getState().recommendList\n    }));\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: this.state.recommendList.map((list, index) => /*#__PURE__*/_jsx(RecommendUI, {\n        data: list\n      }, index))\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}