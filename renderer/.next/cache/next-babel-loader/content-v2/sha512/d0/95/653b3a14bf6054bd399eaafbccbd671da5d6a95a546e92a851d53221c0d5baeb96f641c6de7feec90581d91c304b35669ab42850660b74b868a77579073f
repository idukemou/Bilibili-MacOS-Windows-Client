{"ast":null,"code":"import { Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport React from 'react';\nimport store from \"../../redux/store\";\nimport electron from 'electron';\nimport { getRecommendListAction } from \"../../redux/actionCreators\";\nconst ipcRenderer = electron.ipcRenderer || false;\n\nif (ipcRenderer) {\n  ipcRenderer.send('request_recommend_list');\n  ipcRenderer.on('fetch_recommend_list', async (event, data) => {\n    store.dispatch(await getRecommendListAction(data));\n  });\n}\n\nfunction convertDuration(time) {\n  const hour = Math.floor(time / 3600 % 24);\n  const min = Math.floor(time / 60 % 60);\n  const sec = Math.floor(time % 60);\n\n  if (hour >= 1 && min === 0 && sec === 0) {\n    return `${hour}:00:00`;\n  } else if (hour >= 1 && min !== 0 && sec === 0) {\n    return `${hour}:${min}:00`;\n  } else if (hour >= 1 && min !== 0 && sec !== 0) {\n    return `${hour}:${min}:${sec}`;\n  } else if (min >= 1 && sec === 0) {\n    return `${min}:00`;\n  } else if (min >= 1 && sec !== 0) {\n    return `${min}:${sec}`;\n  } else {\n    return `0:${sec}`;\n  }\n\n  return '0:0';\n}\n\nfunction convertViews(views) {\n  if (views < 10000) {\n    return views;\n  }\n\n  return (views / 10000).toFixed(1) + 'ä¸‡';\n}\n\nclass RecommendUI extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      offsetTop: 0\n    };\n  }\n\n  componentDidMount() {\n    this.setState({\n      offsetTop: this.box.offsetTop\n    });\n  }\n\n  render() {\n    const data = this.props.data;\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: /*#__PURE__*/_jsxs(\"div\", {\n        className: \"rcmd-item\",\n        onClick: () => console.log('post'),\n        ref: box => this.box = box,\n        style: {\n          visibility: this.state.offsetTop > this.props.position + 540 || this.state.offsetTop < this.props.position - 540 ? 'hidden' : 'visible'\n        },\n        children: [/*#__PURE__*/_jsxs(\"div\", {\n          className: \"rcmd-item-info-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"img\", {\n            src: data.pic,\n            alt: data.title,\n            className: \"rcmd-item-image\",\n            style: {\n              display: this.state.offsetTop > this.props.position + 540 || this.state.offsetTop < this.props.position - 540 ? 'none' : 'block'\n            }\n          }), /*#__PURE__*/_jsxs(\"div\", {\n            className: \"rcmd-item-stat\",\n            children: [/*#__PURE__*/_jsx(\"span\", {\n              className: \"rcmd-item-duration\",\n              children: convertDuration(data.duration)\n            }), /*#__PURE__*/_jsxs(\"span\", {\n              className: \"rcmd-item-views\",\n              children: [convertViews(data.stat.view), \"\\u89C2\\u770B\"]\n            })]\n          })]\n        }), /*#__PURE__*/_jsxs(\"div\", {\n          className: \"rcmd-item-title-wrapper\",\n          children: [/*#__PURE__*/_jsx(\"div\", {\n            className: \"rcmd-item-owner\",\n            children: /*#__PURE__*/_jsx(\"img\", {\n              src: data.owner.face,\n              alt: data.owner.name,\n              style: {\n                display: this.state.offsetTop > this.props.position + 540 || this.state.offsetTop < this.props.position - 540 ? 'none' : 'block'\n              }\n            })\n          }), /*#__PURE__*/_jsx(\"div\", {\n            className: \"rcmd-item-title\",\n            children: /*#__PURE__*/_jsx(\"strong\", {\n              children: data.title\n            })\n          })]\n        })]\n      })\n    });\n  }\n\n}\n\nexport default class Recommend extends React.Component {\n  constructor(props) {\n    super(props);\n\n    _defineProperty(this, \"loadMore\", () => {\n      const _this = this;\n\n      if (ipcRenderer) {\n        ipcRenderer.invoke('request_recommend_list_append').then(data => {\n          _this.setState({\n            recommendList: _this.state.recommendList.concat(data.item)\n          });\n        });\n      }\n    });\n\n    this.state = {\n      recommendList: []\n    };\n  }\n\n  componentDidMount() {\n    const _this = this;\n\n    this.unsubscribe = store.subscribe(() => {\n      this.setState({\n        recommendList: store.getState().recommendList\n      }, () => {\n        setTimeout(() => {\n          _this.unsubscribe();\n        }, 2000);\n      });\n    });\n  }\n\n  shouldComponentUpdate(nextProps, nextState, nextContext) {\n    if (nextProps.loading) {\n      this.loadMore();\n    }\n\n    return true;\n  }\n\n  render() {\n    return /*#__PURE__*/_jsx(_Fragment, {\n      children: this.state.recommendList.map((list, index) => /*#__PURE__*/_jsx(RecommendUI, _objectSpread({\n        data: list\n      }, this.props), index))\n    });\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}