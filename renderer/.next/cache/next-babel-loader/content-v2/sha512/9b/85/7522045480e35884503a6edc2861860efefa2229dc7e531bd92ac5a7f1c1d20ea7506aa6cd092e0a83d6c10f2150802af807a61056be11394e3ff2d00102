{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class Player {\n  constructor(mediaDataSource) {\n    _defineProperty(this, \"getInstance\", () => {\n      return flvjs.createPlayer(this.mediaDataSource);\n    });\n\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n  }\n\n}","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","constructor","mediaDataSource","flvjs","createPlayer","type","isLive","hasVideo","hasAudio"],"mappings":";;;;;;AAAA,eAAe,MAAMA,MAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,eAAD,EAAkB;AAAA,yCAUf,MAAM;AAChB,aAAOC,KAAK,CAACC,YAAN,CAAmB,KAAKF,eAAxB,CAAP;AACH,KAZ4B;;AACzB,SAAKA,eAAL;AACIG,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKON,eALP;AAOH;;AATsB","sourcesContent":["export default class Player{\n    constructor(mediaDataSource) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n    }\n\n    getInstance = () => {\n        return flvjs.createPlayer(this.mediaDataSource);\n    }\n\n\n}\n"]},"metadata":{},"sourceType":"module"}