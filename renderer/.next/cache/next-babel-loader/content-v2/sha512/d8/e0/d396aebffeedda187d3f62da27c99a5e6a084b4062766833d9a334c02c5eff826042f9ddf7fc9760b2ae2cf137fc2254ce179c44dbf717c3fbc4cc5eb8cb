{"ast":null,"code":"import _defineProperty from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/defineProperty\";\nimport _classCallCheck from \"/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/node_modules/next/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar Player = function Player(mediaDataSource) {\n  _classCallCheck(this, Player);\n\n  this.mediaDataSource = _objectSpread({\n    type: 'flv',\n    isLive: false,\n    hasVideo: true,\n    hasAudio: true\n  }, mediaDataSource);\n  return flvjs.createPlayer(this.mediaDataSource);\n};\n\nexport { Player as default };","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","mediaDataSource","type","isLive","hasVideo","hasAudio","flvjs","createPlayer"],"mappings":";;;;;;;IAAqBA,M,GACjB,gBAAYC,eAAZ,EAA6B;AAAA;;AACzB,OAAKA,eAAL;AACIC,IAAAA,IAAI,EAAE,KADV;AAEIC,IAAAA,MAAM,EAAE,KAFZ;AAGIC,IAAAA,QAAQ,EAAE,IAHd;AAIIC,IAAAA,QAAQ,EAAE;AAJd,KAKOJ,eALP;AAQA,SAAOK,KAAK,CAACC,YAAN,CAAmB,KAAKN,eAAxB,CAAP;AACH,C;;SAXgBD,M","sourcesContent":["export default class Player{\n    constructor(mediaDataSource) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n\n        return flvjs.createPlayer(this.mediaDataSource);\n    }\n}\n"]},"metadata":{},"sourceType":"module"}