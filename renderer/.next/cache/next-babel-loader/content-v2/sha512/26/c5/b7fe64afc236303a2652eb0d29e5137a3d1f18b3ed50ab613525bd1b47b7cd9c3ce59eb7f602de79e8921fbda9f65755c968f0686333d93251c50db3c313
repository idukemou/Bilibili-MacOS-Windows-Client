{"ast":null,"code":"import { GET_COUNTRY_LIST, GET_CATEGORY_LIST } from './actionTypes';\nvar defaultState = {\n  availableClientHeight: -1,\n  countryList: {},\n  categoryList: {}\n};\nexport default function reducerHandler() {\n  var state = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : defaultState;\n  var action = arguments.length > 1 ? arguments[1] : undefined;\n\n  if (action.type === GET_COUNTRY_LIST) {\n    var newState = JSON.parse(JSON.stringify(state));\n    newState.countryList = action.countryList;\n    return newState;\n  } else if (action.type === GET_CATEGORY_LIST) {\n    var _newState = JSON.parse(JSON.stringify(state));\n\n    _newState.categoryList = action.categoryList;\n    return _newState;\n  }\n\n  return state;\n}","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/redux/reducer.js"],"names":["GET_COUNTRY_LIST","GET_CATEGORY_LIST","defaultState","availableClientHeight","countryList","categoryList","reducerHandler","state","action","type","newState","JSON","parse","stringify"],"mappings":"AAAA,SACIA,gBADJ,EAEIC,iBAFJ,QAGO,eAHP;AAKA,IAAMC,YAAY,GAAG;AACjBC,EAAAA,qBAAqB,EAAE,CAAC,CADP;AAEjBC,EAAAA,WAAW,EAAE,EAFI;AAGjBC,EAAAA,YAAY,EAAE;AAHG,CAArB;AAMA,eAAe,SAASC,cAAT,GAAsD;AAAA,MAA9BC,KAA8B,uEAAtBL,YAAsB;AAAA,MAARM,MAAQ;;AAEjE,MAAGA,MAAM,CAACC,IAAP,KAAgBT,gBAAnB,EAAoC;AAChC,QAAIU,QAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAf;AACAG,IAAAA,QAAQ,CAACN,WAAT,GAAuBI,MAAM,CAACJ,WAA9B;AACA,WAAOM,QAAP;AACH,GAJD,MAKK,IAAGF,MAAM,CAACC,IAAP,KAAgBR,iBAAnB,EAAqC;AACtC,QAAIS,SAAQ,GAAGC,IAAI,CAACC,KAAL,CAAWD,IAAI,CAACE,SAAL,CAAeN,KAAf,CAAX,CAAf;;AACAG,IAAAA,SAAQ,CAACL,YAAT,GAAwBG,MAAM,CAACH,YAA/B;AACA,WAAOK,SAAP;AACH;;AAED,SAAOH,KAAP;AACH","sourcesContent":["import {\n    GET_COUNTRY_LIST,\n    GET_CATEGORY_LIST\n} from './actionTypes';\n\nconst defaultState = {\n    availableClientHeight: -1,\n    countryList: {},\n    categoryList: {}\n};\n\nexport default function reducerHandler(state = defaultState, action) {\n\n    if(action.type === GET_COUNTRY_LIST){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.countryList = action.countryList;\n        return newState;\n    }\n    else if(action.type === GET_CATEGORY_LIST){\n        let newState = JSON.parse(JSON.stringify(state));\n        newState.categoryList = action.categoryList;\n        return newState;\n    }\n\n    return state;\n}"]},"metadata":{},"sourceType":"module"}