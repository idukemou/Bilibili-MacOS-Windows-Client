{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nexport default class Player {\n  constructor(mediaDataSource, container) {\n    this.mediaDataSource = _objectSpread({\n      type: 'flv',\n      isLive: false,\n      hasVideo: true,\n      hasAudio: true\n    }, mediaDataSource);\n    this.player = flvjs.createPlayer(this.mediaDataSource);\n    this.init(container);\n  }\n  /**\n   * 初始化播放器并自动播放视频\n   * @param container 视频播放容器\n   */\n\n\n  init(container) {\n    this.player.attachMediaElement(document.getElementById(container));\n    this.player.load();\n    this.play();\n  }\n  /**\n   * 开始播放视频\n   */\n\n\n  play() {\n    this.player.play().then(() => {\n      flvjs.LoggingControl.applyConfig({\n        enableAll: false\n      });\n    }).catch(e => {});\n  }\n  /**\n   * 暂停当前播放进度\n   */\n\n\n  pause() {\n    this.player.pause();\n  }\n  /**\n   * 销毁当前FlvPlayer对象\n   */\n\n\n  destroy() {\n    this.player.pause();\n    this.player.unload();\n    this.player.detachMediaElement();\n    this.player.destroy();\n    this.player = null;\n  }\n  /**\n   * 获取当前视频播放时间进度\n   * @return 当前播放进度时间\n   */\n\n\n  getCurrentTime() {\n    return this.player.currentTime;\n  }\n  /**\n   * 设置视频进度位置\n   * @param time 要跳转到的视频播放时间\n   */\n\n\n  setCurrentTime(time) {\n    this.player.currentTime = this.player.currentTime + time;\n  }\n  /**\n   * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n   */\n\n\n  jumpCurrentTime() {\n    this.setCurrentTime(0.1);\n  }\n  /**\n   * 静音当前播放器\n   */\n\n\n  mute() {\n    this.player.muted = true;\n  }\n\n}","map":{"version":3,"sources":["/Users/yuxuan/Desktop/Bilibili-MacOS-Windows-Client/renderer/utils/Player.js"],"names":["Player","constructor","mediaDataSource","container","type","isLive","hasVideo","hasAudio","player","flvjs","createPlayer","init","attachMediaElement","document","getElementById","load","play","then","LoggingControl","applyConfig","enableAll","catch","e","pause","destroy","unload","detachMediaElement","getCurrentTime","currentTime","setCurrentTime","time","jumpCurrentTime","mute","muted"],"mappings":";;;;;;AAAA,eAAe,MAAMA,MAAN,CAAY;AACvBC,EAAAA,WAAW,CAACC,eAAD,EAAkBC,SAAlB,EAA6B;AACpC,SAAKD,eAAL;AACIE,MAAAA,IAAI,EAAE,KADV;AAEIC,MAAAA,MAAM,EAAE,KAFZ;AAGIC,MAAAA,QAAQ,EAAE,IAHd;AAIIC,MAAAA,QAAQ,EAAE;AAJd,OAKOL,eALP;AAOA,SAAKM,MAAL,GAAcC,KAAK,CAACC,YAAN,CAAmB,KAAKR,eAAxB,CAAd;AACA,SAAKS,IAAL,CAAUR,SAAV;AACH;AAED;AACJ;AACA;AACA;;;AACIQ,EAAAA,IAAI,CAACR,SAAD,EAAW;AACX,SAAKK,MAAL,CAAYI,kBAAZ,CAA+BC,QAAQ,CAACC,cAAT,CAAwBX,SAAxB,CAA/B;AACA,SAAKK,MAAL,CAAYO,IAAZ;AACA,SAAKC,IAAL;AACH;AAED;AACJ;AACA;;;AACIA,EAAAA,IAAI,GAAE;AACF,SAAKR,MAAL,CAAYQ,IAAZ,GACKC,IADL,CACU,MAAM;AACRR,MAAAA,KAAK,CAACS,cAAN,CAAqBC,WAArB,CAAiC;AAC7BC,QAAAA,SAAS,EAAE;AADkB,OAAjC;AAGH,KALL,EAMKC,KANL,CAMYC,CAAD,IAAO,CAAE,CANpB;AAOH;AAED;AACJ;AACA;;;AACIC,EAAAA,KAAK,GAAE;AACH,SAAKf,MAAL,CAAYe,KAAZ;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,OAAO,GAAE;AACL,SAAKhB,MAAL,CAAYe,KAAZ;AACA,SAAKf,MAAL,CAAYiB,MAAZ;AACA,SAAKjB,MAAL,CAAYkB,kBAAZ;AACA,SAAKlB,MAAL,CAAYgB,OAAZ;AACA,SAAKhB,MAAL,GAAc,IAAd;AACH;AAED;AACJ;AACA;AACA;;;AACImB,EAAAA,cAAc,GAAE;AACZ,WAAO,KAAKnB,MAAL,CAAYoB,WAAnB;AACH;AAED;AACJ;AACA;AACA;;;AACIC,EAAAA,cAAc,CAACC,IAAD,EAAM;AAChB,SAAKtB,MAAL,CAAYoB,WAAZ,GAA0B,KAAKpB,MAAL,CAAYoB,WAAZ,GAA0BE,IAApD;AACH;AAED;AACJ;AACA;;;AACIC,EAAAA,eAAe,GAAE;AACb,SAAKF,cAAL,CAAoB,GAApB;AACH;AAED;AACJ;AACA;;;AACIG,EAAAA,IAAI,GAAE;AACF,SAAKxB,MAAL,CAAYyB,KAAZ,GAAoB,IAApB;AACH;;AAlFsB","sourcesContent":["export default class Player{\n    constructor(mediaDataSource, container) {\n        this.mediaDataSource = {\n            type: 'flv',\n            isLive: false,\n            hasVideo: true,\n            hasAudio: true,\n            ...mediaDataSource\n        }\n        this.player = flvjs.createPlayer(this.mediaDataSource);\n        this.init(container);\n    }\n\n    /**\n     * 初始化播放器并自动播放视频\n     * @param container 视频播放容器\n     */\n    init(container){\n        this.player.attachMediaElement(document.getElementById(container));\n        this.player.load();\n        this.play();\n    }\n\n    /**\n     * 开始播放视频\n     */\n    play(){\n        this.player.play()\n            .then(() => {\n                flvjs.LoggingControl.applyConfig({\n                    enableAll: false\n                });\n            })\n            .catch((e) => {});\n    }\n\n    /**\n     * 暂停当前播放进度\n     */\n    pause(){\n        this.player.pause();\n    }\n\n    /**\n     * 销毁当前FlvPlayer对象\n     */\n    destroy(){\n        this.player.pause();\n        this.player.unload();\n        this.player.detachMediaElement();\n        this.player.destroy();\n        this.player = null;\n    }\n\n    /**\n     * 获取当前视频播放时间进度\n     * @return 当前播放进度时间\n     */\n    getCurrentTime(){\n        return this.player.currentTime;\n    }\n\n    /**\n     * 设置视频进度位置\n     * @param time 要跳转到的视频播放时间\n     */\n    setCurrentTime(time){\n        this.player.currentTime = this.player.currentTime + time;\n    }\n\n    /**\n     * 当滑动进度条时，为了防止视频流的卡顿，每次都要调用一次jumCurrentTime来前进0.1秒进度\n     */\n    jumpCurrentTime(){\n        this.setCurrentTime(0.1);\n    }\n\n    /**\n     * 静音当前播放器\n     */\n    mute(){\n        this.player.muted = true;\n    }\n}\n"]},"metadata":{},"sourceType":"module"}